<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
</head>
<body>
<h2>Configuración de Eclipse</h2>
<p>El proyecto HybridServer que se ofrece como base del desarrollo está 
configurado para utilizar la codificación de caracteres UTF-8 y el salto
 de línea propio de Unix en el código fuente. Por lo tanto, antes de 
empezar a programar se debe comprobar que estos parámetros son correctos
 tras la importación.</p>
<p>Para ello, con el proyecto abierto y seleccionado en Eclipse, debe 
irse a Project-&gt;Properties. Una vez se abra el diálogo de 
propiedades, debe irse al panel Resource, donde hay que comprobar que 
están seleccionados los siguientes valores:</p>
<ul>
<li>Text file encoding: UTF-8</li>
<li>New text file line delimiter: Unix</li>
</ul>
<h2>Simplificación del Protocolo HTTP</h2>
<p>No es necesario que el servidor implemente el protocolo HTTP, tan 
solo será necesario cumplir con un pequeño conjunto de sus 
funcionalidades. Algunas de las simplificaciones más importantes que 
aplicaremos son que:</p>
<ul>
<li>Siempre utilizaremos la codificación de caracteres UTF-8.</li>
<li>No es necesario dar soporte al esquema de conexión "keep-alive". Las
 conexiones siempre se cierran tras manejar una única petición (p.ej. 
servir una página, eliminar una página, etc.).</li>
<li>Salvo algunas cabeceras importantes, como Content-type y Content-length, no es necesario tenerlas en cuenta.</li>
<li>No es necesario dar soporte a Cookies.</li>
</ul>
<h2>Contenido URL-Encoded</h2>
<p>Es habitual que los navegadores envíen el contenido de los 
formularios condificados en formato URL (URL encoded). Cuando esto 
ocurre, la petición HTTP contendrá la cabecera 
"Content-type:&nbsp;application/x-www-form-urlencoded". En dichos casos,
 el contenido deberá ser decodificado. Para ello se puede utilizar la 
clase&nbsp;java.net.URLDecoder de la siguiente forma:</p>
<p><span style="font-family: 'courier new', courier;">java.net.URLDecoder.decode(contenido, "UTF-8")</span></p>
<p>De este modo, después de guardar el contenido de una petición HTTP 
(clase HTTPRequest), deberemos hacer algo de este estilo para que se 
almacene de forma correcta:</p>
<p><span style="font-family: 'courier new', courier;">String type =&nbsp;headerParams.get("Content-type");</span><br><span style="font-family: 'courier new', courier;">if (type != null &amp;&amp; type.startsWith("application/x-www-form-urlencoded")) {<br>&nbsp; &nbsp;content = URLDecoder.decode(content, "UTF-8");<br>}</span></p>
<h2>Peticiones HTTP</h2>
<p>Una forma sencilla de probar el servidor es utilizar una herramienta del estilo de <a href="https://chrome.google.com/webstore/detail/dhc-resthttp-api-client" target="_blank" title="DHC">DHC</a>, que facilita el hacer peticiones HTTP a una URL concreta.</p>
<h2>Base de datos</h2>
<p>La base de datos utilizada debe contener una única tabla que se llame "HTML" (<strong>deben respetarse las mayúsculas y minúsculas</strong>) con los campos:</p>
<ul>
<li>"uuid" de tipo CHAR(36). Será la clave primaria.</li>
<li>"content" de tipo TEXT en MySQL o LONG VARCHAR en JavaDB.</li>
</ul>
<p>La base de datos estará creada, por lo que el servidor no debe 
contener ninguna sentencia ni función de creación de la base de datos.</p>
<!-- content: html tiny_mce --></body></html>